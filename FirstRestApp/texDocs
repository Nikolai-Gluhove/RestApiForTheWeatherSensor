КОНТРОЛЕРЫ:
    1) POST /sensors/registration
        1.1) Регистрирует новый сенсор в системе
        1.2)  JSON'а - у сенсоров есть только одно поле - название.
        1.3) Вы должны помнить о правилах хорошего кода и использовать DTO для входящего объекта - сенсора
        1.4) Также, вы должны валидировать то, что сенсора с таким названием еще нет в БД (вспоминайте Spring Validator). Если сенсор с таким названием есть в БД - возвращать клиенту сообщение с ошибкой (вспоминайте урок про это
        1.5) Также, если название сенсора пустое или содержит менее 3 или более 30 символов, клиенту должно возвращаться сообщение с ошибкой.
    2) POST /measurements/add
        1.1) Добавляет новое измерение.
        1.2) Вещественное поле "value" содержит значение температуры воздуха,
            1.2.1) Значение "value" должно быть не пустым и находиться в диапазоне от -100 до 100.
        1.3) булево поле "raining" содержит значение true/false в зависимости от того, зарегистрировал ли сенсор дождь или нет.
            1.3.1) Значение "raining" должно быть не пустым.
        1.4) Помимо этого, в этом запросе передается сам объект сенсора, который получил и отправляет эти "измерения".
            1.4.1) Значение "sensor" должно быть не пустым. При этом, название сенсора должно валидироваться в БД.
            1.4.2) Сенсор с таким названием должен быть зарегистрирован в системе (должен быть в БД). Если такого сенсора нет в БД - выдавать ошибку. Также, не забывайте про DTO.
        1.5) Значения температуры воздуха, дождя должны сохранятся в таблице в БД.
        1.6) Также, в каждой строке этой таблицы должно содержаться название того сенсора, который прислал эти измерения. То есть сущность "Измерение" имеет связь с сущностью "Сенсор" (вспоминайте отношения в БД и как их выстраивать в Java классах с помощью Hibernate).
        1.7) Все поля у измерения должны валидироваться.
        1.8) На сервере, у измерения должно выставляться текущее время, оно должно сохраняться в БД
    3) GET /measurements - Возвращает все измерения из БД
    4) GET /measurements/rainyDaysCount - Возвращает количество дождливых дней из БД

№	Задача / Подзадача	Статус (To Do, In Progress, Done, Blocked)	Примечания / Зависимости (Что блокирует задачу?)
2.3	Создать SensorRepository с findByName, existsByName	To Do	2.1 (+-)
2.4	Создать MeasurementRepository с findAll, countDistinctRainyDays() (native query) и countByRainingTrue()	To Do	2.2 (+-)
3.3	Реализовать мапперы SensorMapper и MeasurementMapper	To Do	3.1,3.2
4.1	Реализовать SensorValidator (проверка уникальности через repo) и зарегистрировать в @InitBinder	To Do	3.1, 2.3
4.2	Реализовать MeasurementValidator (проверка, что sensor.name зарегистрирован)	To Do	3.2, 2.3
5.1	Создать SensorService.registerSensor(SensorDTO) с логикой сохранения и обработки дубликатов	To Do	2.3,4.1
5.2	Создать MeasurementService.addMeasurement(MeasurementDTO) — найти Sensor, установить measurementTime=now, сохранить	To Do	2.4,4.2
5.3	Создать MeasurementService.getAllMeasurements() и getRainyDaysCount()	To Do	2.4
6.1	Реализовать SensorController с POST /sensors/registration (signature: @RequestBody @Valid SensorDTO)	To Do	5.1
6.2	Реализовать MeasurementController с POST /measurements/add (принимать MeasurementDTO)	To Do	5.2
6.3	Реализовать GET /measurements — возвращать все измерения	To Do	5.3
6.4	Реализовать GET /measurements/rainyDaysCount — возвращать { "count": <long> }	To Do	5.3
7.1	Создать ErrorResponse DTO и @ControllerAdvice для ошибок валидации и пользовательских исключений	To Do	6.1,6.2
7.2	Обрабатывать MethodArgumentNotValidException и отдавать структурированный JSON ошибок	To Do	7.1
8.1	Создать клиент SensorClient с RestTemplate	To Do	1.4, сервер должен быть запущен
8.2	Реализовать registerSensor(name) в клиенте (POST /sensors/registration)	To Do	8.1
8.3	Реализовать sendRandomMeasurements(sensorName, 1000) — генерировать значения и POST /measurements/add	To Do	8.2, сервер запущен
8.4	Реализовать fetchAllMeasurements() — GET /measurements и проверка на 1000 записей	To Do	8.3
9.1	(Опция) Построить график температур из полученных данных с помощью xchart	To Do	8.4
10.1	Написать README со схемой запуска сервера и клиента	To Do	1.1–1.4
10.2	(Опция) Написать интеграционные тесты контроллеров (MockMvc + H2)	To Do	6.1–6.4, 2.1–2.4


Всего в приложении должно быть 4 адреса:
1) Регистрация сенсора
2) Добавление измерения от сенсора
3) Получение всех измерений
4) Получение количества дождливых дней

После того, как REST приложение будет готово, необходимо
перейти ко второй части задания и реализовать клиента.